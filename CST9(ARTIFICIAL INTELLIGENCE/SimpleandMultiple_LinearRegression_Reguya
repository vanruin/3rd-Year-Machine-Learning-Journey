{"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from google.colab import files\n","\n","\n","\n","dataset = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"_UnWIyUG38Lb","executionInfo":{"status":"ok","timestamp":1758791054323,"user_tz":-480,"elapsed":81404,"user":{"displayName":"Reguya Jovan","userId":"08855487723138969205"}},"outputId":"6a02cb0f-5c69-4871-c3d0-41154841bcdc"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-642ffe5d-67a1-4eed-982e-b2500e7371bc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-642ffe5d-67a1-4eed-982e-b2500e7371bc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving 50_Startups - 50_Startups.csv to 50_Startups - 50_Startups.csv\n"]}]},{"cell_type":"code","source":["DataFrame = pd.read_csv('50_Startups - 50_Startups.csv')"],"metadata":{"id":"4j-z6RQp5mSz","executionInfo":{"status":"ok","timestamp":1758791061512,"user_tz":-480,"elapsed":76,"user":{"displayName":"Reguya Jovan","userId":"08855487723138969205"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n","X_simple = DataFrame[['R&D Spend']].values\n","y_simple = DataFrame['Profit'].values\n","\n","\n","X_train_simple, X_test_simple, y_train_simple, y_test_simple = train_test_split(X_simple, y_simple, test_size=0.20, random_state=42)\n","\n","\n","simple_regressor = LinearRegression()\n","simple_regressor.fit(X_train_simple, y_train_simple)\n","\n","\n","y_predict_simple = simple_regressor.predict(X_test_simple)\n","\n","\n","print(\"Simple Linear Regression Results (R&D Spend vs Profit):\")\n","print(\"Mean Absolute Error:\", mean_absolute_error(y_test_simple, y_predict_simple))\n","print(\"Mean Squared Error:\", mean_squared_error(y_test_simple, y_predict_simple))\n","print(\"R-squared:\", r2_score(y_test_simple, y_predict_simple))\n","\n","\n","plt.scatter(X_test_simple, y_test_simple, color='red')\n","plt.plot(X_test_simple, y_predict_simple, color='blue')\n","plt.title('Profit vs R&D Spend (Test set)')\n","plt.xlabel('R&D Spend')\n","plt.ylabel('Profit')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":541},"id":"BWn8fkkaG68b","executionInfo":{"status":"ok","timestamp":1758791081622,"user_tz":-480,"elapsed":604,"user":{"displayName":"Reguya Jovan","userId":"08855487723138969205"}},"outputId":"d2700189-4edf-494b-f843-f3598e538147"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Simple Linear Regression Results (R&D Spend vs Profit):\n","Mean Absolute Error: 6077.363300620398\n","Mean Squared Error: 59510962.80787997\n","R-squared: 0.9265108109341951\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["correlateion = DataFrame.corr()\n","\n","correlateion"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"4pGHvkof8s4o","executionInfo":{"status":"ok","timestamp":1758704387794,"user_tz":-480,"elapsed":17,"user":{"displayName":"","userId":""}},"outputId":"fa2fb8ba-39ea-4ded-c5bb-167450767f86"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 R&D Spend  Administration  Marketing Spend    Profit  \\\n","R&D Spend         1.000000        0.241955         0.724248  0.972900   \n","Administration    0.241955        1.000000        -0.032154  0.200717   \n","Marketing Spend   0.724248       -0.032154         1.000000  0.747766   \n","Profit            0.972900        0.200717         0.747766  1.000000   \n","State_Florida     0.105711        0.010493         0.205685  0.116244   \n","State_New York    0.039068        0.005145        -0.033670  0.031368   \n","\n","                 State_Florida  State_New York  \n","R&D Spend             0.105711        0.039068  \n","Administration        0.010493        0.005145  \n","Marketing Spend       0.205685       -0.033670  \n","Profit                0.116244        0.031368  \n","State_Florida         1.000000       -0.492366  \n","State_New York       -0.492366        1.000000  "],"text/html":["\n","  <div id=\"df-78fe4a32-ea97-4ca5-ac8f-4c6903dbca10\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>R&amp;D Spend</th>\n","      <th>Administration</th>\n","      <th>Marketing Spend</th>\n","      <th>Profit</th>\n","      <th>State_Florida</th>\n","      <th>State_New York</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>R&amp;D Spend</th>\n","      <td>1.000000</td>\n","      <td>0.241955</td>\n","      <td>0.724248</td>\n","      <td>0.972900</td>\n","      <td>0.105711</td>\n","      <td>0.039068</td>\n","    </tr>\n","    <tr>\n","      <th>Administration</th>\n","      <td>0.241955</td>\n","      <td>1.000000</td>\n","      <td>-0.032154</td>\n","      <td>0.200717</td>\n","      <td>0.010493</td>\n","      <td>0.005145</td>\n","    </tr>\n","    <tr>\n","      <th>Marketing Spend</th>\n","      <td>0.724248</td>\n","      <td>-0.032154</td>\n","      <td>1.000000</td>\n","      <td>0.747766</td>\n","      <td>0.205685</td>\n","      <td>-0.033670</td>\n","    </tr>\n","    <tr>\n","      <th>Profit</th>\n","      <td>0.972900</td>\n","      <td>0.200717</td>\n","      <td>0.747766</td>\n","      <td>1.000000</td>\n","      <td>0.116244</td>\n","      <td>0.031368</td>\n","    </tr>\n","    <tr>\n","      <th>State_Florida</th>\n","      <td>0.105711</td>\n","      <td>0.010493</td>\n","      <td>0.205685</td>\n","      <td>0.116244</td>\n","      <td>1.000000</td>\n","      <td>-0.492366</td>\n","    </tr>\n","    <tr>\n","      <th>State_New York</th>\n","      <td>0.039068</td>\n","      <td>0.005145</td>\n","      <td>-0.033670</td>\n","      <td>0.031368</td>\n","      <td>-0.492366</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78fe4a32-ea97-4ca5-ac8f-4c6903dbca10')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-78fe4a32-ea97-4ca5-ac8f-4c6903dbca10 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-78fe4a32-ea97-4ca5-ac8f-4c6903dbca10');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-80507e9c-b7ce-403a-8411-0e2d28cea3de\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-80507e9c-b7ce-403a-8411-0e2d28cea3de')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-80507e9c-b7ce-403a-8411-0e2d28cea3de button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_7fb05725-782f-45d7-8424-f76524005ded\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('correlateion')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7fb05725-782f-45d7-8424-f76524005ded button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('correlateion');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"correlateion","summary":"{\n  \"name\": \"correlateion\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"R&D Spend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4375519106707735,\n        \"min\": 0.039068162292789525,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.24195524508168925,\n          0.039068162292789525\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Administration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39013151327399503,\n        \"min\": -0.03215387512538653,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.24195524508168925,\n          1.0,\n          0.0051452259391451\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Marketing Spend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44523714600007264,\n        \"min\": -0.03366980007228091,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.7242481330538794,\n          -0.03215387512538653,\n          -0.03366980007228091\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.445125755588168,\n        \"min\": 0.03136760015130278,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9729004656594831,\n          0.20071656826872125,\n          0.03136760015130278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State_Florida\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4817569766065795,\n        \"min\": -0.49236596391733095,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.1057110570250305,\n          0.010493089070248854,\n          -0.49236596391733095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State_New York\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4890319607645965,\n        \"min\": -0.49236596391733095,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.039068162292789525,\n          0.0051452259391451,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#print\n","\n","DataFrame"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"acHRS9BA5s3b","executionInfo":{"status":"ok","timestamp":1758703581467,"user_tz":-480,"elapsed":191,"user":{"displayName":"","userId":""}},"outputId":"3ecec026-cd62-4a83-9d7e-a2c7a57dd731"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    R&D Spend  Administration  Marketing Spend       State     Profit\n","0   165349.20       136897.80        471784.10    New York  192261.83\n","1   162597.70       151377.59        443898.53  California  191792.06\n","2   153441.51       101145.55        407934.54     Florida  191050.39\n","3   144372.41       118671.85        383199.62    New York  182901.99\n","4   142107.34        91391.77        366168.42     Florida  166187.94\n","5   131876.90        99814.71        362861.36    New York  156991.12\n","6   134615.46       147198.87        127716.82  California  156122.51\n","7   130298.13       145530.06        323876.68     Florida  155752.60\n","8   120542.52       148718.95        311613.29    New York  152211.77\n","9   123334.88       108679.17        304981.62  California  149759.96\n","10  101913.08       110594.11        229160.95     Florida  146121.95\n","11  100671.96        91790.61        249744.55  California  144259.40\n","12   93863.75       127320.38        249839.44     Florida  141585.52\n","13   91992.39       135495.07        252664.93  California  134307.35\n","14  119943.24       156547.42        256512.92     Florida  132602.65\n","15  114523.61       122616.84        261776.23    New York  129917.04\n","16   78013.11       121597.55        264346.06  California  126992.93\n","17   94657.16       145077.58        282574.31    New York  125370.37\n","18   91749.16       114175.79        294919.57     Florida  124266.90\n","19   86419.70       153514.11             0.00    New York  122776.86\n","20   76253.86       113867.30        298664.47  California  118474.03\n","21   78389.47       153773.43        299737.29    New York  111313.02\n","22   73994.56       122782.75        303319.26     Florida  110352.25\n","23   67532.53       105751.03        304768.73     Florida  108733.99\n","24   77044.01        99281.34        140574.81    New York  108552.04\n","25   64664.71       139553.16        137962.62  California  107404.34\n","26   75328.87       144135.98        134050.07     Florida  105733.54\n","27   72107.60       127864.55        353183.81    New York  105008.31\n","28   66051.52       182645.56        118148.20     Florida  103282.38\n","29   65605.48       153032.06        107138.38    New York  101004.64\n","30   61994.48       115641.28         91131.24     Florida   99937.59\n","31   61136.38       152701.92         88218.23    New York   97483.56\n","32   63408.86       129219.61         46085.25  California   97427.84\n","33   55493.95       103057.49        214634.81     Florida   96778.92\n","34   46426.07       157693.92        210797.67  California   96712.80\n","35   46014.02        85047.44        205517.64    New York   96479.51\n","36   28663.76       127056.21        201126.82     Florida   90708.19\n","37   44069.95        51283.14        197029.42  California   89949.14\n","38   20229.59        65947.93        185265.10    New York   81229.06\n","39   38558.51        82982.09        174999.30  California   81005.76\n","40   28754.33       118546.05        172795.67  California   78239.91\n","41   27892.92        84710.77        164470.71     Florida   77798.83\n","42   23640.93        96189.63        148001.11  California   71498.49\n","43   15505.73       127382.30         35534.17    New York   69758.98\n","44   22177.74       154806.14         28334.72  California   65200.33\n","45    1000.23       124153.04          1903.93    New York   64926.08\n","46    1315.46       115816.21        297114.46     Florida   49490.75\n","47       0.00       135426.92             0.00  California   42559.73\n","48     542.05        51743.15             0.00    New York   35673.41\n","49       0.00       116983.80         45173.06  California   14681.40"],"text/html":["\n","  <div id=\"df-d7929854-75d9-4962-a11d-5eebff011bae\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>R&amp;D Spend</th>\n","      <th>Administration</th>\n","      <th>Marketing Spend</th>\n","      <th>State</th>\n","      <th>Profit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>165349.20</td>\n","      <td>136897.80</td>\n","      <td>471784.10</td>\n","      <td>New York</td>\n","      <td>192261.83</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>162597.70</td>\n","      <td>151377.59</td>\n","      <td>443898.53</td>\n","      <td>California</td>\n","      <td>191792.06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>153441.51</td>\n","      <td>101145.55</td>\n","      <td>407934.54</td>\n","      <td>Florida</td>\n","      <td>191050.39</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>144372.41</td>\n","      <td>118671.85</td>\n","      <td>383199.62</td>\n","      <td>New York</td>\n","      <td>182901.99</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>142107.34</td>\n","      <td>91391.77</td>\n","      <td>366168.42</td>\n","      <td>Florida</td>\n","      <td>166187.94</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>131876.90</td>\n","      <td>99814.71</td>\n","      <td>362861.36</td>\n","      <td>New York</td>\n","      <td>156991.12</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>134615.46</td>\n","      <td>147198.87</td>\n","      <td>127716.82</td>\n","      <td>California</td>\n","      <td>156122.51</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>130298.13</td>\n","      <td>145530.06</td>\n","      <td>323876.68</td>\n","      <td>Florida</td>\n","      <td>155752.60</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>120542.52</td>\n","      <td>148718.95</td>\n","      <td>311613.29</td>\n","      <td>New York</td>\n","      <td>152211.77</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>123334.88</td>\n","      <td>108679.17</td>\n","      <td>304981.62</td>\n","      <td>California</td>\n","      <td>149759.96</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>101913.08</td>\n","      <td>110594.11</td>\n","      <td>229160.95</td>\n","      <td>Florida</td>\n","      <td>146121.95</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>100671.96</td>\n","      <td>91790.61</td>\n","      <td>249744.55</td>\n","      <td>California</td>\n","      <td>144259.40</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>93863.75</td>\n","      <td>127320.38</td>\n","      <td>249839.44</td>\n","      <td>Florida</td>\n","      <td>141585.52</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>91992.39</td>\n","      <td>135495.07</td>\n","      <td>252664.93</td>\n","      <td>California</td>\n","      <td>134307.35</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>119943.24</td>\n","      <td>156547.42</td>\n","      <td>256512.92</td>\n","      <td>Florida</td>\n","      <td>132602.65</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>114523.61</td>\n","      <td>122616.84</td>\n","      <td>261776.23</td>\n","      <td>New York</td>\n","      <td>129917.04</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>78013.11</td>\n","      <td>121597.55</td>\n","      <td>264346.06</td>\n","      <td>California</td>\n","      <td>126992.93</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>94657.16</td>\n","      <td>145077.58</td>\n","      <td>282574.31</td>\n","      <td>New York</td>\n","      <td>125370.37</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>91749.16</td>\n","      <td>114175.79</td>\n","      <td>294919.57</td>\n","      <td>Florida</td>\n","      <td>124266.90</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>86419.70</td>\n","      <td>153514.11</td>\n","      <td>0.00</td>\n","      <td>New York</td>\n","      <td>122776.86</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>76253.86</td>\n","      <td>113867.30</td>\n","      <td>298664.47</td>\n","      <td>California</td>\n","      <td>118474.03</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>78389.47</td>\n","      <td>153773.43</td>\n","      <td>299737.29</td>\n","      <td>New York</td>\n","      <td>111313.02</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>73994.56</td>\n","      <td>122782.75</td>\n","      <td>303319.26</td>\n","      <td>Florida</td>\n","      <td>110352.25</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>67532.53</td>\n","      <td>105751.03</td>\n","      <td>304768.73</td>\n","      <td>Florida</td>\n","      <td>108733.99</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>77044.01</td>\n","      <td>99281.34</td>\n","      <td>140574.81</td>\n","      <td>New York</td>\n","      <td>108552.04</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>64664.71</td>\n","      <td>139553.16</td>\n","      <td>137962.62</td>\n","      <td>California</td>\n","      <td>107404.34</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>75328.87</td>\n","      <td>144135.98</td>\n","      <td>134050.07</td>\n","      <td>Florida</td>\n","      <td>105733.54</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>72107.60</td>\n","      <td>127864.55</td>\n","      <td>353183.81</td>\n","      <td>New York</td>\n","      <td>105008.31</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>66051.52</td>\n","      <td>182645.56</td>\n","      <td>118148.20</td>\n","      <td>Florida</td>\n","      <td>103282.38</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>65605.48</td>\n","      <td>153032.06</td>\n","      <td>107138.38</td>\n","      <td>New York</td>\n","      <td>101004.64</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>61994.48</td>\n","      <td>115641.28</td>\n","      <td>91131.24</td>\n","      <td>Florida</td>\n","      <td>99937.59</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>61136.38</td>\n","      <td>152701.92</td>\n","      <td>88218.23</td>\n","      <td>New York</td>\n","      <td>97483.56</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>63408.86</td>\n","      <td>129219.61</td>\n","      <td>46085.25</td>\n","      <td>California</td>\n","      <td>97427.84</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>55493.95</td>\n","      <td>103057.49</td>\n","      <td>214634.81</td>\n","      <td>Florida</td>\n","      <td>96778.92</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>46426.07</td>\n","      <td>157693.92</td>\n","      <td>210797.67</td>\n","      <td>California</td>\n","      <td>96712.80</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>46014.02</td>\n","      <td>85047.44</td>\n","      <td>205517.64</td>\n","      <td>New York</td>\n","      <td>96479.51</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>28663.76</td>\n","      <td>127056.21</td>\n","      <td>201126.82</td>\n","      <td>Florida</td>\n","      <td>90708.19</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>44069.95</td>\n","      <td>51283.14</td>\n","      <td>197029.42</td>\n","      <td>California</td>\n","      <td>89949.14</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>20229.59</td>\n","      <td>65947.93</td>\n","      <td>185265.10</td>\n","      <td>New York</td>\n","      <td>81229.06</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>38558.51</td>\n","      <td>82982.09</td>\n","      <td>174999.30</td>\n","      <td>California</td>\n","      <td>81005.76</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>28754.33</td>\n","      <td>118546.05</td>\n","      <td>172795.67</td>\n","      <td>California</td>\n","      <td>78239.91</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>27892.92</td>\n","      <td>84710.77</td>\n","      <td>164470.71</td>\n","      <td>Florida</td>\n","      <td>77798.83</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>23640.93</td>\n","      <td>96189.63</td>\n","      <td>148001.11</td>\n","      <td>California</td>\n","      <td>71498.49</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>15505.73</td>\n","      <td>127382.30</td>\n","      <td>35534.17</td>\n","      <td>New York</td>\n","      <td>69758.98</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>22177.74</td>\n","      <td>154806.14</td>\n","      <td>28334.72</td>\n","      <td>California</td>\n","      <td>65200.33</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>1000.23</td>\n","      <td>124153.04</td>\n","      <td>1903.93</td>\n","      <td>New York</td>\n","      <td>64926.08</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>1315.46</td>\n","      <td>115816.21</td>\n","      <td>297114.46</td>\n","      <td>Florida</td>\n","      <td>49490.75</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>0.00</td>\n","      <td>135426.92</td>\n","      <td>0.00</td>\n","      <td>California</td>\n","      <td>42559.73</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>542.05</td>\n","      <td>51743.15</td>\n","      <td>0.00</td>\n","      <td>New York</td>\n","      <td>35673.41</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>0.00</td>\n","      <td>116983.80</td>\n","      <td>45173.06</td>\n","      <td>California</td>\n","      <td>14681.40</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7929854-75d9-4962-a11d-5eebff011bae')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d7929854-75d9-4962-a11d-5eebff011bae button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d7929854-75d9-4962-a11d-5eebff011bae');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-25517a46-5c06-4449-9004-2a282b466d15\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25517a46-5c06-4449-9004-2a282b466d15')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-25517a46-5c06-4449-9004-2a282b466d15 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_3fcc72f6-df92-4ce4-99ef-e55b7b9891d0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('DataFrame')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3fcc72f6-df92-4ce4-99ef-e55b7b9891d0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('DataFrame');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"DataFrame","summary":"{\n  \"name\": \"DataFrame\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"R&D Spend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45902.25648230753,\n        \"min\": 0.0,\n        \"max\": 165349.2,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          91992.39,\n          1000.23,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Administration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28017.802755488683,\n        \"min\": 51283.14,\n        \"max\": 182645.56,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          135495.07,\n          82982.09,\n          115641.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Marketing Spend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 122290.31072584528,\n        \"min\": 0.0,\n        \"max\": 471784.1,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          353183.81,\n          172795.67,\n          134050.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"New York\",\n          \"California\",\n          \"Florida\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40306.18033765055,\n        \"min\": 14681.4,\n        \"max\": 192261.83,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          134307.35,\n          81005.76,\n          99937.59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#Spliting\n","X = DataFrame.iloc[:, :-1].values\n","y = DataFrame.iloc[:, -1].values\n","\n","X_train, X_test , y_train , y_test = train_test_split(X,y, test_size=0.20, random_state = 42)\n","\n","regs = LinearRegression()\n","\n","training = regs.fit(X_train,y_train)\n","\n","y_predict = regs.predict(X_test)\n","\n","accur = train_test_split(y_test,y_predict)\n","print(y_predict)\n","print(\"Accuracy : \",accur)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k3f1q6kf6GvY","executionInfo":{"status":"ok","timestamp":1758704199832,"user_tz":-480,"elapsed":39,"user":{"displayName":"","userId":""}},"outputId":"1723f0f9-7faa-43cb-b3ce-9b59a0ad7113"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0.53562209  0.43571361 -0.11848184  0.3395252   0.56051372  0.2948566\n"," -0.07011885  0.45695643  0.39396682  0.38933294]\n","Accuracy :  [array([False, False,  True,  True,  True,  True, False]), array([False, False, False]), array([-0.11848184,  0.43571361,  0.2948566 ,  0.3395252 ,  0.38933294,\n","        0.56051372, -0.07011885]), array([0.39396682, 0.45695643, 0.53562209])]\n"]}]},{"cell_type":"code","source":["from statsmodels.stats.outliers_influence import variance_inflation_factor\n","from statsmodels.tools.tools import add_constant\n","import pandas as pd\n","\n","\n","vif_dataframe =  pd.DataFrame()\n","X = DataFrame.drop(columns=['Profit'])\n","\n","#convert bbolean to int to calculate :)\n","for col in ['State_Florida', 'State_New York']:\n","    if col in X.columns:\n","        X[col] = X[col].astype(int)\n","\n","\n","X = add_constant(X)\n","\n","vif_dataframe[\"Feature\"] = X.columns\n","\n","vif_dataframe[\"VIF\"] = [variance_inflation_factor(X.values, i)\n","for i in range(X.shape[1])]\n","\n","print(vif_dataframe)"],"metadata":{"id":"QljOMXYB-u1-","executionInfo":{"status":"ok","timestamp":1758704892307,"user_tz":-480,"elapsed":89,"user":{"displayName":"","userId":""}},"outputId":"6762ce6f-f6ac-439d-82bc-23a5ad1045f7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           Feature        VIF\n","0            const  26.600153\n","1        R&D Spend   2.495511\n","2   Administration   1.177766\n","3  Marketing Spend   2.416797\n","4    State_Florida   1.387641\n","5   State_New York   1.335061\n"]}]},{"cell_type":"code","source":["corr = DataFrame.corr()\n","corr"],"metadata":{"id":"iGDXzqr7_GVJ","executionInfo":{"status":"ok","timestamp":1758705001083,"user_tz":-480,"elapsed":153,"user":{"displayName":"","userId":""}},"outputId":"910b5b9f-3cce-4369-908d-31c9736a6eaa","colab":{"base_uri":"https://localhost:8080/","height":238}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 R&D Spend  Administration  Marketing Spend    Profit  \\\n","R&D Spend         1.000000        0.241955         0.724248  0.972900   \n","Administration    0.241955        1.000000        -0.032154  0.200717   \n","Marketing Spend   0.724248       -0.032154         1.000000  0.747766   \n","Profit            0.972900        0.200717         0.747766  1.000000   \n","State_Florida     0.105711        0.010493         0.205685  0.116244   \n","State_New York    0.039068        0.005145        -0.033670  0.031368   \n","\n","                 State_Florida  State_New York  \n","R&D Spend             0.105711        0.039068  \n","Administration        0.010493        0.005145  \n","Marketing Spend       0.205685       -0.033670  \n","Profit                0.116244        0.031368  \n","State_Florida         1.000000       -0.492366  \n","State_New York       -0.492366        1.000000  "],"text/html":["\n","  <div id=\"df-ae560a76-6ccb-42b7-98cc-f854dd13427a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>R&amp;D Spend</th>\n","      <th>Administration</th>\n","      <th>Marketing Spend</th>\n","      <th>Profit</th>\n","      <th>State_Florida</th>\n","      <th>State_New York</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>R&amp;D Spend</th>\n","      <td>1.000000</td>\n","      <td>0.241955</td>\n","      <td>0.724248</td>\n","      <td>0.972900</td>\n","      <td>0.105711</td>\n","      <td>0.039068</td>\n","    </tr>\n","    <tr>\n","      <th>Administration</th>\n","      <td>0.241955</td>\n","      <td>1.000000</td>\n","      <td>-0.032154</td>\n","      <td>0.200717</td>\n","      <td>0.010493</td>\n","      <td>0.005145</td>\n","    </tr>\n","    <tr>\n","      <th>Marketing Spend</th>\n","      <td>0.724248</td>\n","      <td>-0.032154</td>\n","      <td>1.000000</td>\n","      <td>0.747766</td>\n","      <td>0.205685</td>\n","      <td>-0.033670</td>\n","    </tr>\n","    <tr>\n","      <th>Profit</th>\n","      <td>0.972900</td>\n","      <td>0.200717</td>\n","      <td>0.747766</td>\n","      <td>1.000000</td>\n","      <td>0.116244</td>\n","      <td>0.031368</td>\n","    </tr>\n","    <tr>\n","      <th>State_Florida</th>\n","      <td>0.105711</td>\n","      <td>0.010493</td>\n","      <td>0.205685</td>\n","      <td>0.116244</td>\n","      <td>1.000000</td>\n","      <td>-0.492366</td>\n","    </tr>\n","    <tr>\n","      <th>State_New York</th>\n","      <td>0.039068</td>\n","      <td>0.005145</td>\n","      <td>-0.033670</td>\n","      <td>0.031368</td>\n","      <td>-0.492366</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae560a76-6ccb-42b7-98cc-f854dd13427a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ae560a76-6ccb-42b7-98cc-f854dd13427a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ae560a76-6ccb-42b7-98cc-f854dd13427a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-28928796-7192-4566-8146-9989dde23fd9\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-28928796-7192-4566-8146-9989dde23fd9')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-28928796-7192-4566-8146-9989dde23fd9 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_b65ea49e-7998-4845-8d21-290de6002582\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('corr')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b65ea49e-7998-4845-8d21-290de6002582 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('corr');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"corr","summary":"{\n  \"name\": \"corr\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"R&D Spend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4375519106707735,\n        \"min\": 0.039068162292789525,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.24195524508168925,\n          0.039068162292789525\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Administration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39013151327399503,\n        \"min\": -0.03215387512538653,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.24195524508168925,\n          1.0,\n          0.0051452259391451\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Marketing Spend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44523714600007264,\n        \"min\": -0.03366980007228091,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.7242481330538794,\n          -0.03215387512538653,\n          -0.03366980007228091\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.445125755588168,\n        \"min\": 0.03136760015130278,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9729004656594831,\n          0.20071656826872125,\n          0.03136760015130278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State_Florida\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4817569766065795,\n        \"min\": -0.49236596391733095,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.1057110570250305,\n          0.010493089070248854,\n          -0.49236596391733095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State_New York\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4890319607645965,\n        \"min\": -0.49236596391733095,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.039068162292789525,\n          0.0051452259391451,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n","\n","\n","print(\"Mean Absolute Error : \", mean_absolute_error(y_test, y_predict))\n","print(\"Mean Squared Error : \", mean_squared_error(y_test,y_predict))"],"metadata":{"id":"Nl4pQJ-l_L4h","executionInfo":{"status":"ok","timestamp":1758705159059,"user_tz":-480,"elapsed":19,"user":{"displayName":"","userId":""}},"outputId":"33b7690c-0a72-4642-f722-4cc695cfc6ac","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error :  0.44266311710545436\n","Mean Squared Error :  0.23592276247207397\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1758705254339}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}